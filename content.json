{"posts":[{"title":"C++中的&quot;volatile&quot;关键字","text":"1.”volatile”的语义1volatile int flag = 0; 表示flag可能被硬件、中断、多线程或其他外部因素修改 编译器不能假设其值在两次访问之间保持不变 禁止优化：如删除“看似无用”的读取、合并多次读取、将变量放入寄存器等 2.从汇编角度看样例代码Code1: (无volatile)12345int flag = 1;int sum = 0;for (int i = 0; i &lt; 1000; i++) { sum += flag; // 编译器可能优化为 sum += 1} 可能生成的汇编代码 1movl $1000, %eax ; sum = 1000 * 1 完全跳过循环和内存访问，因为编译器认为flag不会变。 样例代码Code2: (有volatile)12345volatile int flag = 1;int sum = 0;for (int i = 0; i &lt; 1000; i++) { sum += flag; // 必须每次从内存读取 flag} 可能生成的汇编代码 12345678910movl $0, %ebx ; sum = 0movl $0, %ecx ; i = 0.L1: cmpl $1000, %ecx jge .L2 movl flag(%rip), %eax ; ← 每次都从内存读取 flag！ addl %eax, %ebx ; sum += flag incl %ecx jmp .L1.L2: 每次循环都执行movl flag(%rip), %eax从内存加载flag 即使flag在循环中未被本程序修改，编译器也不敢假设其值不变 本文章中的汇编不确保可以运行，是”伪代码” 3.样例代码实际输出的汇编码 Compile on Archlinux WSL 样例代码CodeA: (无volatile)12345678int main(){ int flag = 1; int sum = 0; for (int i = 0; i &lt; 1000; i++) { sum += flag; } return 0;} 汇编代码: 1234567891011121314151617181920212223242526272829303132 .file &quot;codeA.cpp&quot; .text .globl main .type main, @functionmain:.LFB0: .cfi_startproc pushq %rbp .cfi_def_cfa_offset 16 .cfi_offset 6, -16 movq %rsp, %rbp .cfi_def_cfa_register 6 movl $1, -4(%rbp) movl $0, -12(%rbp) movl $0, -8(%rbp) jmp .L2.L3: movl -4(%rbp), %eax addl %eax, -12(%rbp) addl $1, -8(%rbp).L2: cmpl $999, -8(%rbp) jle .L3 movl $0, %eax popq %rbp .cfi_def_cfa 7, 8 ret .cfi_endproc.LFE0: .size main, .-main .ident &quot;GCC: (GNU) 15.2.1 20250813&quot; .section .note.GNU-stack,&quot;&quot;,@progbits 样例代码CodeB: (有volatile)12345678int main(){ volatile int flag = 1; int sum = 0; for (int i = 0; i &lt; 1000; i++) { sum += flag; } return 0;} 汇编代码: 1234567891011121314151617181920212223242526272829303132 .file &quot;codeB.cpp&quot; .text .globl main .type main, @functionmain:.LFB0: .cfi_startproc pushq %rbp .cfi_def_cfa_offset 16 .cfi_offset 6, -16 movq %rsp, %rbp .cfi_def_cfa_register 6 movl $1, -12(%rbp) movl $0, -8(%rbp) movl $0, -4(%rbp) jmp .L2.L3: movl -12(%rbp), %eax addl %eax, -8(%rbp) addl $1, -4(%rbp).L2: cmpl $999, -4(%rbp) jle .L3 movl $0, %eax popq %rbp .cfi_def_cfa 7, 8 ret .cfi_endproc.LFE0: .size main, .-main .ident &quot;GCC: (GNU) 15.2.1 20250813&quot; .section .note.GNU-stack,&quot;&quot;,@progbits 为什么没有区别? 因为没有使用编译器优化，O0模式 使用O2后CodeA:12345678910111213141516 .file &quot;codeA.cpp&quot; .text .section .text.startup,&quot;ax&quot;,@progbits .p2align 4 .globl main .type main, @functionmain:.LFB0: .cfi_startproc xorl %eax, %eax ret .cfi_endproc.LFE0: .size main, .-main .ident &quot;GCC: (GNU) 15.2.1 20250813&quot; .section .note.GNU-stack,&quot;&quot;,@progbits CodeB:1234567891011121314151617181920212223242526 .file &quot;codeB.cpp&quot; .text .section .text.startup,&quot;ax&quot;,@progbits .p2align 4 .globl main .type main, @functionmain:.LFB0: .cfi_startproc movl $1, -4(%rsp) movl $1000, %eax .p2align 4 .p2align 4 .p2align 3.L2: movl -4(%rsp), %edx movl -4(%rsp), %edx subl $2, %eax jne .L2 xorl %eax, %eax ret .cfi_endproc.LFE0: .size main, .-main .ident &quot;GCC: (GNU) 15.2.1 20250813&quot; .section .note.GNU-stack,&quot;&quot;,@progbits 4.从汇编看从开启O2的汇编里看，CodeA由于没有使用”volatile”关键字，for循环直接被优化了 123main: xorl %eax, %eax ret 为什么? flag是编译期常量（值为 1） sum未被使用（无return sum或输出） 编译器判定循环无副作用 -&gt; Dead Code Elimination而CodeB中 12345678910main: movl $1, -4(%rsp) # flag = 1 存入栈 movl $1000, %eax # 计数器初始化.L2: movl -4(%rsp), %edx # &lt;- 强制从内存读取 flag movl -4(%rsp), %edx # &lt;- 再次读取（可能因对齐或语义保留） subl $2, %eax jne .L2 xorl %eax, %eax ret 循环被保留，尽管flag值不变 每次循环都执行movl -4(%rsp), %edx 即使%edx未被使用，编译器也不敢删除 因为volatile表示“每次访问都有潜在副作用” 循环步长为 2（subl $2, %eax）可能是编译器尝试合并两次加法（sum += flag + flag），但因”volatile”仍需两次独立读取 5.写在最后 “volatile”不是运行时特性，而是对编译器优化器的约束。在-O0（无优化）下，普通变量与”volatile”行为相似（都访问内存），差异不明显 在-O2等优化级别下，”volatile” 强制保留所有内存访问，确保程序行为符合预期","link":"/2025/10/12/TheKeywordVolatileInCPP/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2025/10/12/hello-world/"}],"tags":[{"name":"C++","slug":"C","link":"/tags/C/"}],"categories":[],"pages":[{"title":"About me","text":"只是一些文字罢了… 自述 所在地:杭州 目标:做最NB的人(曾经) 好好的活着(现在) 目前岗位:学生 联系方式:neohutao233@icloud.com 我的MBTI:INFP 相关经历 时间 学校 2016-2022 杭州市文一街小学(秀水校区) 2022-2025 杭州市三墩中学 2025-2028 杭州市第十一中学(大关校区) 2025 - … 杭州市第十一中学团委学生会公关部 杭州市第十一中学团委摄影社 杭州市第十一中学团委校宣队 相关作品待补充 相关成就 BiliBili单视频播放量破20.6W 相关奖项&amp;证书 第十八届全国中小学生信息技术创新与实践大赛二等奖 获第二十一届西湖区中学生电脑制作一等奖 第二十二届西湖区学生信息素养提升实践三等奖 获 2021 年西湖区中小学生科技节三等奖 微软MTA 程序设计 By Python &amp; 网络安全 中国民航局的轻型民用无人驾驶航空器安全操控理论培训合格证 青少年人工智能技术水平测试1-2级 欧洲开放大学国家地理摄影专业证书 BMD达芬奇18调色师认证 BMD达芬奇19初级认证 国家普通话水平测试认证 二级乙等 TDA计算机硬件与网络认证 使用jQuery、Ajax和JSON进行Web开发认证 Linux系统管理员认证 网络安全与防御黑客认证 Itronix高级Java认证 2025年青少年文学大赛 “悦·读者杯” 一等奖 第七届全国大学生心理健康暨心理知识竞赛 一等奖 还有一些细碎不提及了","link":"/about/index.html"}]}