{"posts":[{"title":"C++中的&quot;volatile&quot;关键字","text":"1.”volatile”的语义1volatile int flag = 0; 表示flag可能被硬件、中断、多线程或其他外部因素修改 编译器不能假设其值在两次访问之间保持不变 禁止优化：如删除“看似无用”的读取、合并多次读取、将变量放入寄存器等 2.从汇编角度看样例代码Code1: (无volatile)12345int flag = 1;int sum = 0;for (int i = 0; i &lt; 1000; i++) { sum += flag; // 编译器可能优化为 sum += 1} 可能生成的汇编代码 1movl $1000, %eax ; sum = 1000 * 1 完全跳过循环和内存访问，因为编译器认为flag不会变。 样例代码Code2: (有volatile)12345volatile int flag = 1;int sum = 0;for (int i = 0; i &lt; 1000; i++) { sum += flag; // 必须每次从内存读取 flag} 可能生成的汇编代码 12345678910movl $0, %ebx ; sum = 0movl $0, %ecx ; i = 0.L1: cmpl $1000, %ecx jge .L2 movl flag(%rip), %eax ; ← 每次都从内存读取 flag！ addl %eax, %ebx ; sum += flag incl %ecx jmp .L1.L2: 每次循环都执行movl flag(%rip), %eax从内存加载flag 即使flag在循环中未被本程序修改，编译器也不敢假设其值不变 本文章中的汇编不确保可以运行，是”伪代码” 3.样例代码实际输出的汇编码 Compile on Archlinux WSL 样例代码CodeA: (无volatile)12345678int main(){ int flag = 1; int sum = 0; for (int i = 0; i &lt; 1000; i++) { sum += flag; } return 0;} 汇编代码: 1234567891011121314151617181920212223242526272829303132 .file &quot;codeA.cpp&quot; .text .globl main .type main, @functionmain:.LFB0: .cfi_startproc pushq %rbp .cfi_def_cfa_offset 16 .cfi_offset 6, -16 movq %rsp, %rbp .cfi_def_cfa_register 6 movl $1, -4(%rbp) movl $0, -12(%rbp) movl $0, -8(%rbp) jmp .L2.L3: movl -4(%rbp), %eax addl %eax, -12(%rbp) addl $1, -8(%rbp).L2: cmpl $999, -8(%rbp) jle .L3 movl $0, %eax popq %rbp .cfi_def_cfa 7, 8 ret .cfi_endproc.LFE0: .size main, .-main .ident &quot;GCC: (GNU) 15.2.1 20250813&quot; .section .note.GNU-stack,&quot;&quot;,@progbits 样例代码CodeB: (有volatile)12345678int main(){ volatile int flag = 1; int sum = 0; for (int i = 0; i &lt; 1000; i++) { sum += flag; } return 0;} 汇编代码: 1234567891011121314151617181920212223242526272829303132 .file &quot;codeB.cpp&quot; .text .globl main .type main, @functionmain:.LFB0: .cfi_startproc pushq %rbp .cfi_def_cfa_offset 16 .cfi_offset 6, -16 movq %rsp, %rbp .cfi_def_cfa_register 6 movl $1, -12(%rbp) movl $0, -8(%rbp) movl $0, -4(%rbp) jmp .L2.L3: movl -12(%rbp), %eax addl %eax, -8(%rbp) addl $1, -4(%rbp).L2: cmpl $999, -4(%rbp) jle .L3 movl $0, %eax popq %rbp .cfi_def_cfa 7, 8 ret .cfi_endproc.LFE0: .size main, .-main .ident &quot;GCC: (GNU) 15.2.1 20250813&quot; .section .note.GNU-stack,&quot;&quot;,@progbits 为什么没有区别? 因为没有使用编译器优化，O0模式 使用O2后CodeA:12345678910111213141516 .file &quot;codeA.cpp&quot; .text .section .text.startup,&quot;ax&quot;,@progbits .p2align 4 .globl main .type main, @functionmain:.LFB0: .cfi_startproc xorl %eax, %eax ret .cfi_endproc.LFE0: .size main, .-main .ident &quot;GCC: (GNU) 15.2.1 20250813&quot; .section .note.GNU-stack,&quot;&quot;,@progbits CodeB:1234567891011121314151617181920212223242526 .file &quot;codeB.cpp&quot; .text .section .text.startup,&quot;ax&quot;,@progbits .p2align 4 .globl main .type main, @functionmain:.LFB0: .cfi_startproc movl $1, -4(%rsp) movl $1000, %eax .p2align 4 .p2align 4 .p2align 3.L2: movl -4(%rsp), %edx movl -4(%rsp), %edx subl $2, %eax jne .L2 xorl %eax, %eax ret .cfi_endproc.LFE0: .size main, .-main .ident &quot;GCC: (GNU) 15.2.1 20250813&quot; .section .note.GNU-stack,&quot;&quot;,@progbits 4.从汇编看从开启O2的汇编里看，CodeA由于没有使用”volatile”关键字，for循环直接被优化了 123main: xorl %eax, %eax ret 为什么? flag是编译期常量（值为 1） sum未被使用（无return sum或输出） 编译器判定循环无副作用 -&gt; Dead Code Elimination而CodeB中 12345678910main: movl $1, -4(%rsp) # flag = 1 存入栈 movl $1000, %eax # 计数器初始化.L2: movl -4(%rsp), %edx # &lt;- 强制从内存读取 flag movl -4(%rsp), %edx # &lt;- 再次读取（可能因对齐或语义保留） subl $2, %eax jne .L2 xorl %eax, %eax ret 循环被保留，尽管flag值不变 每次循环都执行movl -4(%rsp), %edx 即使%edx未被使用，编译器也不敢删除 因为volatile表示“每次访问都有潜在副作用” 循环步长为 2（subl $2, %eax）可能是编译器尝试合并两次加法（sum += flag + flag），但因”volatile”仍需两次独立读取 5.写在最后 “volatile”不是运行时特性，而是对编译器优化器的约束。在-O0（无优化）下，普通变量与”volatile”行为相似（都访问内存），差异不明显 在-O2等优化级别下，”volatile” 强制保留所有内存访问，确保程序行为符合预期","link":"/2025/10/12/TheKeywordVolatileInCPP/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2025/10/12/hello-world/"},{"title":"ATRI ~My Dear Moment~中值得写入作文的句子","text":"本文章中的句子出自ATRI ~My Dear Moment~ 版权归出版方所有 1. 光芒，会给与人类希望。有了希望，人们就能继续前行。无论那束光芒多么遥远，多么渺小，人们都会迈向未来，相信自己终有一日能够抵达。 —— 夏生· 类型：抒情散文 / 励志作文 / 科幻小说中的哲理描写· 场景：描写人类追寻希望的精神、克服困难的场景，适合开篇或高潮时点明主题。2. 人类要想活下去，是需要光的 —— ATRI· 类型：科幻哲学 / 议论文· 场景：讨论人类生存与文明延续的命题场景，可用于文章开头的引言或科幻世界观设定。3. 如果固执己见就能让现状算作幸福，那么据推测，幸福与不幸都是毫无价值的概念 —— ATRI类型：哲理议论文 / 抒情散文场景：适合写思想深度的段落，用来探讨幸福与价值、人的选择与坚持。4. 接受灭亡，坐以待毙就是解脱吗？乐园和墓地是同义词吗？如果还有时间，就应该挣扎到最后。如果因为终有一死就放弃挣扎，那人类的一生也没有意义，立刻死去反而代价会更小。 —— ATRI· 类型：哲理议论文 / 科幻小说人物独白· 场景：适合描写面对危机、末日或绝望境地时的思考，用作冲突高潮或人物心理刻画。5. 人类的繁荣也都会失去意义，毕竟地球自有命数，宇宙也终将迎来热寂 —— 夏生· 类型：科幻哲学 / 宇宙观描写· 场景：文章中的宏观哲理描写，适合铺陈末日感或宇宙背景，增强史诗感。6. 请不要舍弃自己的未来 —— ATRI· 类型：励志 / 抒情 / 励志作文· 场景：直接点明主题，适合作为呼吁、结尾或高潮段的鼓舞语句。7. 没有好奇心的人是做不出学问的，要是有能想象出“说不定”，用这仅存的可能性来拓开范围的心境，那被看做是错误的行为不如说会变成线索也说不定 —— 夏生父亲· 类型：议论文 / 励志散文· 场景：强调探索精神与科学态度，适合写学习、科研、创新主题作文或哲理科幻背景。8. 不知喜悦，何来悲伤？ —— 夏生· 类型：抒情散文 / 文学哲思· 场景：适合作为反思、哲理描写或人物心理独白的句子，突出情感对比。9. 只要有光，无论目标多么遥远，人们都能继续前行 —— 夏生· 类型：励志 / 抒情 / 科幻哲理· 场景：强调希望与目标，适合文章核心主题、开篇引题或高潮段落。10. 人类的自救之路永远不会断绝 —— 夏生· 类型：科幻哲学 / 励志· 场景：描写人类坚韧不拔的精神，适合结尾总结、鼓舞读者。11. 我们不知道什么才是正确的。只是不想放弃未来而已 —— 夏生· 类型：哲理抒情 / 科幻小说人物心理· 场景：刻画人物理性与坚持，适合作为心理独白或反思段落。12. 大家看向我指的方向。那里出现了一道飞翔的红色光芒。从云间飞向宇宙的一束光芒。为了摆脱地球重力，正在喷射出庞大的能量。那是指向未来的光之轨迹。这代表着人类即将离开陆地也要生存下去的傲慢，以及绝不向渐渐到来的灭亡妥协的决心。这无关善恶，只是纯粹对生存的执着，对未来的期盼。 —— 夏生· 类型：科幻小说 / 叙事文学 / 抒情散文· 场景：科幻作品高潮描写，史诗场景刻画人类奋斗与希望，适合小说高潮或视觉化描写段落。来自游玩时摘抄，如有纰漏敬请补充。 .hide_text{ color: black; background: black; transition: color 0.3s ease, background-color 0.3s ease; } .hide_text:hover{ color:white; } 其实我觉得Happy Ending并不Happy(","link":"/2025/10/26/TheGoodSentenceInATRIMyDearMoment/"}],"tags":[{"name":"C++","slug":"C","link":"/tags/C/"},{"name":"名句","slug":"名句","link":"/tags/%E5%90%8D%E5%8F%A5/"},{"name":"Galgame","slug":"Galgame","link":"/tags/Galgame/"}],"categories":[{"name":"编程","slug":"编程","link":"/categories/%E7%BC%96%E7%A8%8B/"},{"name":"C++","slug":"编程/C","link":"/categories/%E7%BC%96%E7%A8%8B/C/"},{"name":"Galgame","slug":"Galgame","link":"/categories/Galgame/"},{"name":"句子摘录","slug":"Galgame/句子摘录","link":"/categories/Galgame/%E5%8F%A5%E5%AD%90%E6%91%98%E5%BD%95/"}],"pages":[{"title":"About me","text":"只是一些文字罢了… 自述 所在地:杭州 目标:做最NB的人(曾经) 好好的活着(现在) 目前岗位:学生 联系方式:neohutao233@icloud.com 我的MBTI:INFP 相关经历 时间 学校 2016-2022 杭州市文一街小学(秀水校区) 2022-2025 杭州市三墩中学 2025-2028 杭州市第十一中学(大关校区) 2025 - … 杭州市第十一中学团委学生会公关部 杭州市第十一中学团委摄影社 杭州市第十一中学团委校宣队 相关作品待补充 相关成就 BiliBili单视频播放量破20.6W 相关奖项&amp;证书 第十八届全国中小学生信息技术创新与实践大赛二等奖 获第二十一届西湖区中学生电脑制作一等奖 第二十二届西湖区学生信息素养提升实践三等奖 获 2021 年西湖区中小学生科技节三等奖 微软MTA 程序设计 By Python &amp; 网络安全 中国民航局的轻型民用无人驾驶航空器安全操控理论培训合格证 青少年人工智能技术水平测试1-2级 欧洲开放大学国家地理摄影专业证书 BMD达芬奇18调色师认证 BMD达芬奇19初级认证 国家普通话水平测试认证 二级乙等 TDA计算机硬件与网络认证 使用jQuery、Ajax和JSON进行Web开发认证 Linux系统管理员认证 网络安全与防御黑客认证 Itronix高级Java认证 2025年青少年文学大赛 “悦·读者杯” 一等奖 第七届全国大学生心理健康暨心理知识竞赛 一等奖 还有一些细碎不提及了","link":"/about/index.html"}]}