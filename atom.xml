<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ariakage&#39;s Blog</title>
  
  
  <link href="https://ariakage.github.io/atom.xml" rel="self"/>
  
  <link href="https://ariakage.github.io/"/>
  <updated>2025-10-12T02:47:39.323Z</updated>
  <id>https://ariakage.github.io/</id>
  
  <author>
    <name>Ariakage</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++中的&quot;volatile&quot;关键字</title>
    <link href="https://ariakage.github.io/2025/10/12/TheKeywordVolatileInCPP/"/>
    <id>https://ariakage.github.io/2025/10/12/TheKeywordVolatileInCPP/</id>
    <published>2025-10-12T00:46:26.000Z</published>
    <updated>2025-10-12T02:47:39.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-”volatile”的语义"><a href="#1-”volatile”的语义" class="headerlink" title="1.”volatile”的语义"></a>1.”volatile”的语义</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> flag = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li>表示<code>flag</code>可能被硬件、中断、多线程或其他外部因素修改</li><li>编译器不能假设其值在两次访问之间保持不变</li><li>禁止优化：如删除“看似无用”的读取、合并多次读取、将变量放入寄存器等</li></ul><h2 id="2-从汇编角度看"><a href="#2-从汇编角度看" class="headerlink" title="2.从汇编角度看"></a>2.从汇编角度看</h2><h5 id="样例代码Code1-无volatile"><a href="#样例代码Code1-无volatile" class="headerlink" title="样例代码Code1: (无volatile)"></a>样例代码Code1: (无volatile)</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    sum += flag;  <span class="comment">// 编译器可能优化为 sum += 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能生成的汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">movl   $1000, %eax    ; sum = 1000 * 1</span><br></pre></td></tr></table></figure><p>完全跳过循环和内存访问，因为编译器认为<code>flag</code>不会变。</p><h5 id="样例代码Code2-有volatile"><a href="#样例代码Code2-有volatile" class="headerlink" title="样例代码Code2: (有volatile)"></a>样例代码Code2: (有volatile)</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    sum += flag;  <span class="comment">// 必须每次从内存读取 flag</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能生成的汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">movl   $0, %ebx          ; sum = 0</span><br><span class="line">movl   $0, %ecx          ; i = 0</span><br><span class="line">.L1:</span><br><span class="line">    cmpl   $1000, %ecx</span><br><span class="line">    jge    .L2</span><br><span class="line">    movl   flag(%rip), %eax   ; ← 每次都从内存读取 flag！</span><br><span class="line">    addl   %eax, %ebx         ; sum += flag</span><br><span class="line">    incl   %ecx</span><br><span class="line">    jmp    .L1</span><br><span class="line">.L2:</span><br></pre></td></tr></table></figure><ul><li>每次循环都执行<code>movl flag(%rip), %eax</code>从内存加载<code>flag</code></li><li>即使<code>flag</code>在循环中未被本程序修改，编译器也不敢假设其值不变</li></ul><article class="message is-info">                <div class="message-body">            <p>本文章中的汇编不确保可以运行，是”伪代码”</p>        </div>    </article><h2 id="3-样例代码实际输出的汇编码"><a href="#3-样例代码实际输出的汇编码" class="headerlink" title="3.样例代码实际输出的汇编码"></a>3.样例代码实际输出的汇编码</h2><article class="message is-primary">                <div class="message-body">            <p>Compile on Archlinux WSL</p>        </div>    </article><h5 id="样例代码CodeA-无volatile"><a href="#样例代码CodeA-无volatile" class="headerlink" title="样例代码CodeA: (无volatile)"></a>样例代码CodeA: (无volatile)</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        sum += flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汇编代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">.file&quot;codeA.cpp&quot;</span><br><span class="line">.text</span><br><span class="line">.globlmain</span><br><span class="line">.typemain, @function</span><br><span class="line">main:</span><br><span class="line">.LFB0:</span><br><span class="line">.cfi_startproc</span><br><span class="line">pushq%rbp</span><br><span class="line">.cfi_def_cfa_offset 16</span><br><span class="line">.cfi_offset 6, -16</span><br><span class="line">movq%rsp, %rbp</span><br><span class="line">.cfi_def_cfa_register 6</span><br><span class="line">movl$1, -4(%rbp)</span><br><span class="line">movl$0, -12(%rbp)</span><br><span class="line">movl$0, -8(%rbp)</span><br><span class="line">jmp.L2</span><br><span class="line">.L3:</span><br><span class="line">movl-4(%rbp), %eax</span><br><span class="line">addl%eax, -12(%rbp)</span><br><span class="line">addl$1, -8(%rbp)</span><br><span class="line">.L2:</span><br><span class="line">cmpl$999, -8(%rbp)</span><br><span class="line">jle.L3</span><br><span class="line">movl$0, %eax</span><br><span class="line">popq%rbp</span><br><span class="line">.cfi_def_cfa 7, 8</span><br><span class="line">ret</span><br><span class="line">.cfi_endproc</span><br><span class="line">.LFE0:</span><br><span class="line">.sizemain, .-main</span><br><span class="line">.ident&quot;GCC: (GNU) 15.2.1 20250813&quot;</span><br><span class="line">.section.note.GNU-stack,&quot;&quot;,@progbits</span><br></pre></td></tr></table></figure><h5 id="样例代码CodeB-有volatile"><a href="#样例代码CodeB-有volatile" class="headerlink" title="样例代码CodeB: (有volatile)"></a>样例代码CodeB: (有volatile)</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        sum += flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汇编代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">.file&quot;codeB.cpp&quot;</span><br><span class="line">.text</span><br><span class="line">.globlmain</span><br><span class="line">.typemain, @function</span><br><span class="line">main:</span><br><span class="line">.LFB0:</span><br><span class="line">.cfi_startproc</span><br><span class="line">pushq%rbp</span><br><span class="line">.cfi_def_cfa_offset 16</span><br><span class="line">.cfi_offset 6, -16</span><br><span class="line">movq%rsp, %rbp</span><br><span class="line">.cfi_def_cfa_register 6</span><br><span class="line">movl$1, -12(%rbp)</span><br><span class="line">movl$0, -8(%rbp)</span><br><span class="line">movl$0, -4(%rbp)</span><br><span class="line">jmp.L2</span><br><span class="line">.L3:</span><br><span class="line">movl-12(%rbp), %eax</span><br><span class="line">addl%eax, -8(%rbp)</span><br><span class="line">addl$1, -4(%rbp)</span><br><span class="line">.L2:</span><br><span class="line">cmpl$999, -4(%rbp)</span><br><span class="line">jle.L3</span><br><span class="line">movl$0, %eax</span><br><span class="line">popq%rbp</span><br><span class="line">.cfi_def_cfa 7, 8</span><br><span class="line">ret</span><br><span class="line">.cfi_endproc</span><br><span class="line">.LFE0:</span><br><span class="line">.sizemain, .-main</span><br><span class="line">.ident&quot;GCC: (GNU) 15.2.1 20250813&quot;</span><br><span class="line">.section.note.GNU-stack,&quot;&quot;,@progbits</span><br></pre></td></tr></table></figure><article class="message is-info">        <div class="message-header"><p>为什么没有区别?</p></div>        <div class="message-body">            <p>因为没有使用编译器优化，<code>O0</code>模式</p>        </div>    </article><h4 id="使用O2后"><a href="#使用O2后" class="headerlink" title="使用O2后"></a>使用<code>O2</code>后</h4><h4 id="CodeA"><a href="#CodeA" class="headerlink" title="CodeA:"></a>CodeA:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.file&quot;codeA.cpp&quot;</span><br><span class="line">.text</span><br><span class="line">.section.text.startup,&quot;ax&quot;,@progbits</span><br><span class="line">.p2align 4</span><br><span class="line">.globlmain</span><br><span class="line">.typemain, @function</span><br><span class="line">main:</span><br><span class="line">.LFB0:</span><br><span class="line">.cfi_startproc</span><br><span class="line">xorl%eax, %eax</span><br><span class="line">ret</span><br><span class="line">.cfi_endproc</span><br><span class="line">.LFE0:</span><br><span class="line">.sizemain, .-main</span><br><span class="line">.ident&quot;GCC: (GNU) 15.2.1 20250813&quot;</span><br><span class="line">.section.note.GNU-stack,&quot;&quot;,@progbits</span><br></pre></td></tr></table></figure><h4 id="CodeB"><a href="#CodeB" class="headerlink" title="CodeB:"></a>CodeB:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">.file&quot;codeB.cpp&quot;</span><br><span class="line">.text</span><br><span class="line">.section.text.startup,&quot;ax&quot;,@progbits</span><br><span class="line">.p2align 4</span><br><span class="line">.globlmain</span><br><span class="line">.typemain, @function</span><br><span class="line">main:</span><br><span class="line">.LFB0:</span><br><span class="line">.cfi_startproc</span><br><span class="line">movl$1, -4(%rsp)</span><br><span class="line">movl$1000, %eax</span><br><span class="line">.p2align 4</span><br><span class="line">.p2align 4</span><br><span class="line">.p2align 3</span><br><span class="line">.L2:</span><br><span class="line">movl-4(%rsp), %edx</span><br><span class="line">movl-4(%rsp), %edx</span><br><span class="line">subl$2, %eax</span><br><span class="line">jne.L2</span><br><span class="line">xorl%eax, %eax</span><br><span class="line">ret</span><br><span class="line">.cfi_endproc</span><br><span class="line">.LFE0:</span><br><span class="line">.sizemain, .-main</span><br><span class="line">.ident&quot;GCC: (GNU) 15.2.1 20250813&quot;</span><br><span class="line">.section.note.GNU-stack,&quot;&quot;,@progbits</span><br></pre></td></tr></table></figure><h2 id="4-从汇编看"><a href="#4-从汇编看" class="headerlink" title="4.从汇编看"></a>4.从汇编看</h2><p>从开启O2的汇编里看，CodeA由于没有使用”volatile”关键字，for循环直接被优化了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">    xorl %eax, %eax</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure><h6 id="为什么"><a href="#为什么" class="headerlink" title="为什么?"></a>为什么?</h6><ul><li><code>flag</code>是编译期常量（值为 1）</li><li><code>sum</code>未被使用（无<code>return sum</code>或输出）</li><li>编译器判定循环无副作用 -&gt; Dead Code Elimination<br>而CodeB中</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">    movl $1, -4(%rsp)     # flag = 1 存入栈</span><br><span class="line">    movl $1000, %eax      # 计数器初始化</span><br><span class="line">.L2:</span><br><span class="line">    movl -4(%rsp), %edx   # &lt;- 强制从内存读取 flag</span><br><span class="line">    movl -4(%rsp), %edx   # &lt;- 再次读取（可能因对齐或语义保留）</span><br><span class="line">    subl $2, %eax</span><br><span class="line">    jne .L2</span><br><span class="line">    xorl %eax, %eax</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure><ul><li>循环被保留，尽管<code>flag</code>值不变</li><li>每次循环都执行<code>movl -4(%rsp), %edx</code></li><li>即使<code>%edx</code>未被使用，编译器也不敢删除</li><li>因为<code>volatile</code>表示“每次访问都有潜在副作用”</li><li>循环步长为 2（<code>subl $2, %eax</code>）可能是编译器尝试合并两次加法（<code>sum += flag + flag</code>），但因”volatile”仍需两次独立读取</li></ul><h2 id="5-写在最后"><a href="#5-写在最后" class="headerlink" title="5.写在最后"></a>5.写在最后</h2><ul><li>“volatile”不是运行时特性，而是对编译器优化器的约束。<br>在<code>-O0</code>（无优化）下，普通变量与”volatile”行为相似（都访问内存），差异不明显</li><li>在<code>-O2</code>等优化级别下，”volatile” 强制保留所有内存访问，确保程序行为符合预期</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-”volatile”的语义&quot;&gt;&lt;a href=&quot;#1-”volatile”的语义&quot; class=&quot;headerlink&quot; title=&quot;1.”volatile”的语义&quot;&gt;&lt;/a&gt;1.”volatile”的语义&lt;/h2&gt;&lt;figure class=&quot;highli</summary>
      
    
    
    
    
    <category term="C++" scheme="https://ariakage.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ariakage.github.io/2025/10/12/hello-world/"/>
    <id>https://ariakage.github.io/2025/10/12/hello-world/</id>
    <published>2025-10-11T21:37:46.210Z</published>
    <updated>2025-10-11T21:37:46.210Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
